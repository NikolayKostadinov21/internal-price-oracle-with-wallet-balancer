# Docker Compose configuration for Price Oracle service

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: price_oracle_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - oracle_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      start_period: 30s

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: price_oracle_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - oracle_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      start_period: 10s

  # Adminer for database management (optional)
  adminer:
    image: adminer:latest
    container_name: price_oracle_adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    networks:
      - oracle_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Price Oracle Service
  price-oracle:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: price_oracle_service
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
    networks:
      - oracle_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  mysql_data:
  redis_data:

networks:
  oracle_network:
    driver: bridge
